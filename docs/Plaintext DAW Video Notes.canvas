{
	"nodes":[
		{"id":"f4c643702d7cb8dc","x":1197,"y":-311,"width":763,"height":59,"type":"text","text":"# Research: SoundFonts, MIDI Instruments"},
		{"id":"c678a92285ed884c","x":1202,"y":1260,"width":1323,"height":261,"type":"group","label":"Next Actions"},
		{"id":"a981dd9f4aeb7b21","x":1934,"y":1441,"width":250,"height":60,"type":"text","text":"Render config w/o timing"},
		{"id":"405d5f6f4bdf4636","x":2255,"y":1441,"width":250,"height":60,"type":"text","text":"Add timing"},
		{"id":"e0d9a85052b31d6e","x":1223,"y":1441,"width":250,"height":60,"type":"text","text":"Write a single note, config or not, to wav"},
		{"id":"2b67b2ed79332ec9","x":1590,"y":1441,"width":250,"height":60,"type":"text","text":"Write two notes"},
		{"id":"6550dd481eaa1549","x":2222,"y":1290,"width":250,"height":60,"type":"text","text":"Read a note in config from wav file"},
		{"id":"17371842b33f5819","x":1934,"y":1290,"width":250,"height":60,"type":"text","text":"Find or create a free piano wav of a note"},
		{"id":"373598f559ef4b2f","x":1631,"y":1290,"width":250,"height":60,"type":"text","text":"Paste/commit new config"},
		{"id":"2fb873535bd2a98c","x":1223,"y":1289,"width":367,"height":63,"type":"text","text":"Add this canvas to `docs` folder in repo\nMake `docs` an Obsidian vault"},
		{"id":"af417d0276453e97","x":1197,"y":-227,"width":400,"height":400,"type":"link","url":"https://pypi.org/project/sf2-loader/"},
		{"id":"379177a2189ecb9f","x":1202,"y":361,"width":1837,"height":692,"type":"group","label":"New Config Format Design"},
		{"id":"4b02239944e00734","x":1345,"y":462,"width":250,"height":60,"type":"text","text":"Song"},
		{"id":"3482cb810278ca4a","x":1499,"y":588,"width":250,"height":60,"type":"text","text":"Pattern"},
		{"id":"79649e7f703607a8","x":1809,"y":743,"width":250,"height":60,"type":"text","text":"Instrument\n(map note to sample)"},
		{"id":"694598b7332e6c69","x":1222,"y":836,"width":250,"height":60,"type":"text","text":"Sample"},
		{"id":"a04f1d112529af8e","x":1531,"y":836,"width":250,"height":60,"type":"text","text":"Note"},
		{"id":"97e053ca3a0ae141","x":1222,"y":381,"width":481,"height":60,"type":"text","text":"## A More Complete Format?"},
		{"id":"5a0c55e51c389cd2","x":1197,"y":1083,"width":334,"height":117,"type":"text","text":"Future Idea ðŸ’¡\nTrack for \"performance\"\nAuto-increment \"takes\""},
		{"id":"2c3e388e09936399","x":1177,"y":-331,"width":1191,"height":621,"type":"group","label":"Research"},
		{"id":"477efe54e95f9534","x":1177,"y":-625,"width":640,"height":246,"type":"group","label":"Recap"},
		{"id":"7fc6065585b8e681","x":1197,"y":-605,"width":600,"height":68,"type":"text","text":"# Coding a Plaintext DAW 2"},
		{"id":"cbef6cc833750af4","x":1197,"y":-519,"width":326,"height":60,"type":"text","text":"## Where we left off"},
		{"id":"faffa43a56b5f9f6","x":1197,"y":-459,"width":326,"height":60,"type":"text","text":"Working CLI + some fancy ideas"},
		{"id":"e71a84d7c1f521f3","x":1197,"y":173,"width":287,"height":85,"type":"text","text":"- Lets you load soundfonts\n- Coupled with `musicpy`"},
		{"id":"6bfff3b9f0b17e0a","x":1618,"y":-227,"width":716,"height":400,"type":"text","text":"Musescore has sf3 but it's early  \n  \nMaybe extract sf2 samples and use?  \n  \nSf2 spec - 87 pg PDF from 1998\nhttp://www.synthfont.com/SFSPEC21.PDF\n  \nInstrument = collection of samples?  \nMaybe add zip support eventually? Skip sf2 altogether  \n  \nTo superimpose two audio files, basically just add the raw data?  \n[https://stackoverflow.com/questions/4039158/mixing-two-audio-files-together-with-python](https://stackoverflow.com/questions/4039158/mixing-two-audio-files-together-with-python\nDepend on wave, numpy to get/manipulate raw sound data"},
		{"id":"f111c3234e50cc64","x":-1511,"y":-530,"width":1155,"height":1583,"type":"group","label":"Video 1"},
		{"id":"ec609f5709a5610f","x":-724,"y":-41,"width":317,"height":109,"type":"text","text":"Cross-reference pattern, instrument to create one huge song obj"},
		{"id":"0988525ab69f6e07","x":-717,"y":-402,"width":304,"height":86,"color":"4","type":"text","text":"First step:\nCreate git repo w/ README"},
		{"id":"80c9a260a1d6a642","x":-717,"y":134,"width":303,"height":94,"type":"text","text":"Research soundfonts, midi instruments - how to render a note to wav?"},
		{"id":"88e9e493dc977f82","x":-690,"y":-272,"width":250,"height":82,"color":"4","type":"text","text":"Add CLI command\nprint hello world\n`plaintext-daw`"},
		{"id":"2a6cb8499d14a644","x":-690,"y":-147,"width":250,"height":60,"color":"4","type":"text","text":"Parse sample yaml to dict"},
		{"id":"4647fe06fe5ce4fb","x":-1484,"y":741,"width":477,"height":287,"type":"group","label":"Title Ideas"},
		{"id":"8384d83cfd5e3776","x":-1464,"y":761,"width":395,"height":65,"type":"text","text":"Plaintext DAW: Why it could change EVERYTHING about music"},
		{"id":"1090b40338cc9fe4","x":-1464,"y":839,"width":425,"height":72,"type":"text","text":"Building a Plaintext DAW to Change Music FOREVER"},
		{"id":"04483880b8342513","x":-1464,"y":911,"width":437,"height":97,"type":"text","text":"Let's change music FOREVER - Coding a Plaintext DAW"},
		{"id":"437ac2564937cf34","x":-1083,"y":-96,"width":275,"height":110,"type":"text","text":"Do all on video\n(or do all coding on vid?)\n(do planning offline?)"},
		{"id":"8d9a958a31edd992","x":-1491,"y":21,"width":368,"height":97,"type":"text","text":"MVP2: Include another wav file to \"superimpose\""},
		{"id":"79e61c584d4fbdbf","x":-1491,"y":143,"width":250,"height":60,"type":"text","text":"Units:\nbpm, start_measure"},
		{"id":"5d2c431b628e5032","x":-1491,"y":242,"width":711,"height":429,"type":"text","text":"MVP music file:\n```yaml\npiano:\n  type: instrument\n  path: piano.sft # sound font\npattern1:\n  type: pattern\n  notes: [a,b,c,d]\n  instrument: piano\nsong:\n  type: song\n  output: 'song.wav'\n  patterns:\n    - name: pattern1\n      start: 1 # start measure\n      repeat: 0 # how many copies after the original one\n```"},
		{"id":"d6fe6c0b929ee0c7","x":-1491,"y":-510,"width":600,"height":68,"type":"text","text":"# Coding a Plaintext DAW"},
		{"id":"154b7a91c7dea622","x":-1491,"y":-442,"width":250,"height":60,"type":"text","text":"Name: `plaintext-daw`\nCan always rename later"},
		{"id":"a20a20bfdf1f7fe7","x":-737,"y":-426,"width":357,"height":677,"type":"group","label":"First Steps"},
		{"id":"70c9e4989f8ee0fe","x":-1491,"y":-365,"width":600,"height":248,"color":"3","type":"text","text":"**Main Idea**:\n- use plain text as your music creation format\n\nImplications:\n- Can use Git to collab / develop music just like code\n- Artists can \"open source\" their song\n- People can \"fork\" to cover / remix"},
		{"id":"f8afb62d4aee9461","x":-1491,"y":-112,"width":357,"height":116,"type":"text","text":"MVP: render ANY wav from plaintext notes + MIDI instrument"},
		{"id":"35cf0192f07dc2d6","x":2091,"y":388,"width":920,"height":652,"type":"text","text":"```yaml\npiano:\n  type: instrument\n  samples:\n    a:\n      path: piano/a.wav\n    b:\n      path: piano/b.wav\npattern1:\n  type: pattern\n  instrument: piano\n  notes:\n\t- value: a\n\t  length: 1\n\t- value: b\n\t  length: 2\nsong:\n  type: song\n  output: 'song.wav'\n  bpm: 100\n  sample_rate: 44100\n  samples:\n    - path: voice/clip1.wav\n      start: 2 # start on measure 2\n  patterns:\n    - name: pattern1\n      start: 1 # start measure\n      repeat: 0 # how many copies after the original one\n```"},
		{"id":"fa41e3170382df0e","x":2334,"y":648,"width":650,"height":104,"type":"text","text":"```music-abc\na,2 b,4\n```"}
	],
	"edges":[
		{"id":"0a70142f830f7f2d","fromNode":"2a6cb8499d14a644","fromSide":"bottom","toNode":"ec609f5709a5610f","toSide":"top"},
		{"id":"619cdf09b6fd2090","fromNode":"ec609f5709a5610f","fromSide":"bottom","toNode":"80c9a260a1d6a642","toSide":"top"},
		{"id":"7c16ec1d8b4a15eb","fromNode":"0988525ab69f6e07","fromSide":"bottom","toNode":"88e9e493dc977f82","toSide":"top"},
		{"id":"2c6d8789c57233cc","fromNode":"88e9e493dc977f82","fromSide":"bottom","toNode":"2a6cb8499d14a644","toSide":"top"},
		{"id":"8e9608359cc25f30","fromNode":"4b02239944e00734","fromSide":"bottom","toNode":"3482cb810278ca4a","toSide":"top","label":"has many"},
		{"id":"fcc5f2c0398a16be","fromNode":"3482cb810278ca4a","fromSide":"bottom","toNode":"79649e7f703607a8","toSide":"top","label":"has one"},
		{"id":"2e92f6afa25505b4","fromNode":"3482cb810278ca4a","fromSide":"bottom","toNode":"a04f1d112529af8e","toSide":"top","label":"has many"},
		{"id":"73ad499d36701634","fromNode":"4b02239944e00734","fromSide":"bottom","toNode":"694598b7332e6c69","toSide":"top","label":"has many"},
		{"id":"1ecd13ea36f40a27","fromNode":"79649e7f703607a8","fromSide":"bottom","toNode":"694598b7332e6c69","toSide":"bottom","label":"has many"},
		{"id":"fe8247958a375e56","fromNode":"17371842b33f5819","fromSide":"right","toNode":"6550dd481eaa1549","toSide":"left"},
		{"id":"48b7eab602d713b4","fromNode":"e0d9a85052b31d6e","fromSide":"right","toNode":"2b67b2ed79332ec9","toSide":"left"},
		{"id":"0f7afe55b6cadbac","fromNode":"2b67b2ed79332ec9","fromSide":"right","toNode":"a981dd9f4aeb7b21","toSide":"left"},
		{"id":"d2a0934e709e3d28","fromNode":"a981dd9f4aeb7b21","fromSide":"right","toNode":"405d5f6f4bdf4636","toSide":"left"},
		{"id":"59847d65f08ca147","fromNode":"6550dd481eaa1549","fromSide":"bottom","toNode":"e0d9a85052b31d6e","toSide":"top"},
		{"id":"cb05ccca815cc57e","fromNode":"373598f559ef4b2f","fromSide":"right","toNode":"17371842b33f5819","toSide":"left"},
		{"id":"25cc934f2f1c0588","fromNode":"2fb873535bd2a98c","fromSide":"right","toNode":"373598f559ef4b2f","toSide":"left"}
	]
}